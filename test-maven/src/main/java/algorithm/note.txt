################################################################################
################################################################################
1 OOP(Object Oriented Programming) 객체지향프로그래밍
⎼코드의 재사용성이 높아 새로운 코드를 작성할 때 기존의 코드를 이용하여 쉽게 작성할 수 있다. 
⎼코드의 관리가 용이하여 코드간의 관계를 이용해서 적은 노력으로 쉽게 코드를 변경할 수 있다. 
⎼메서드를 이용해서 데이터를 보호하고 올바른 값을 유지하도록 하며 코드의 중복을 제거하여 코드의 불일치로 인한 오동작을 방지할 수 있다. 
1 캡슐화(encapsulation) & 은닉화(information hiding) 
2 상속성(inheritance)
3 다형성(polymorphism)
4 추상화(abstraction)

캡슐화
- 실제로 구현되는 부분을 외부에 드러나지 않도록 캡슐로 감싸 이용방법만을 알려주는것
- 은닉화또한 캡슐화의 한부분이다
실제로 구현되는 부분을 외부에 드러나지 않도록 캡슐로 감싸 이용방법만을 알려주는것이 캡슐화의 중요 컨셉이다.
그리고, 이 캡슐화(encapsulration) 과정에서 데이터들과, 여러 로직들이 은닉이 된다.
말그래도  캡슐(encapsulration)로 감싸 숨기(은닉화 , hiding)는 것이다.
*은닉화 
1.은닉이란 내부 데이터, 내부 연산을 외부에서 접근하지 못하도록 
은닉(hiding) 혹은 격리(isolation)시키는 것을 의미한다.
2.변수에 접근지정자를 private 로 지정한다.
3.setter , getter 를 사용해 변수의 접근,제어한다.

은닉화는 캡슐화에 비해 비교적 구체적인 개념이다.
 
은닉화는 캡슐화의 한 개념으로 객체 외부에서 객체내의 자료로의 접근을 제한하고 데이터를 수정,조작하는 동작은
내부에 두고 접근(getter),설정(setter)하는 메소드로 결과만 받는것이다.
이렇게 되면 외부에서는 내부적인 움직임을 알수가 없으며 데이터에 어떤값이 있는지 또는 어떤 변화가 일어나는지 알수없다.  단지 데이터의 접근을 메서드(setter , getter)를 통해 결과만 받을뿐이다. 이런한 것을 은닉화라 한다.

은닉화와 캡슐화의 차이
 
1.은닉화는 중요사항이(변수던 메소드던간에)밖으로 드러나지 않도록 꼭꼭 감추는것
2.캡슐화는 중요사항을 감춘 상태에서 외부에 그것을 사용할수 있는 방법을 설정하고 외부와 직접적으로 의사소통을 의미 한다

(한마디로 맛집에서 비밀소스의 제조법을 안알려주나 따로 판매는 하는 느낌이다...)
 
출처:http://blog.houkibosi.com/entry/%EC%BA%A1%EC%8A%90%ED%99%94%EC%99%80-%EC%9D%80%EB%8B%89%ED%99%94
참고:http://blog.naver.com/echris7/140023022776
 
상속 
- 상위 개념의 특징을 하위 개념이 물려받는 것
- 상위객체의 메소드를 그대로 물려받아 재사용하면서 새로운 객체를 만드는 방법

다형성 
- 같은 이름의 함수 호출에 대하여 각 객체에 따라 다른 동작을 할 수 있도록 구성하는 방법.
- 하나의 변수로 여러타입의 객체를 가질 수 있는 것
 
추상화 
- 추상화 작업을 통해 실세계 상황을 간결하고, 명확하게 모델링하면, 그것을 프로그램으로 실체화 즉 구현
- 객체지향에서는 클래스를 이용, 실세계에 대응하는 추상모델 만듦.
- 객체들의 공통적인 특징(속성 과 기능)을 뽑아내는 것이다.
[출처] 1.OOP(Object Oriented Programming) 객체지향프로그래밍|작성자 dandelion

################################################################################
################################################################################
2 General Questions about Java
################################################################################
2.1 What is JVM ? Why is Java called the Platform Independent Programming Language?
 Java 가상 머신 (JVM)은 Java 바이트 코드 를 실행할 수 있는 프로세스 가상 머신 입니다 . 
각 Java 소스 파일은 JVM에 의해 실행되는 바이트 코드 파일로 컴파일됩니다. 
Java는 각 플랫폼마다 프로그래머가 다시 작성하거나 다시 컴파일하지 않고도 모든 플랫폼에서 실행할 수있는 응용 프로그램을 작성할 수 있도록 설계되었습니다. 
자바 가상 머신은 특정 명령 길이와 기본 하드웨어 플랫폼의 다른 특수성을 알고 있기 때문에이를 가능하게합니다.

################################################################################
2.2 What is the Difference between JDK and JRE ?
JDK : Java Development Kit
자바 개발도구입니다. 자바 프로그래밍을 할 때 필요한 컴파일러 등이 들어 있습니다. 자바 프로그래머가 아닌 일반인은 다운로드받을 필요가 없습니다.
JDK 를 설치했다면 아래의 JRE도 같이 설치됩니다.

JRE : Java Runtime Environment
컴파일된 자바 프로그램을 실행시킬 수 있는 자바 환경을 만드는 것입니다.
자바 프로그램을 실행시키려면 JRE 를 반드시 설치해야 합니다.
JRE 안에 자바 프로그래밍 도구는 없습니다. 자바 프로그래밍을 하기 위해서는 위의 JDK를 받아야 합니다. 둘 다 무료입니다.

################################################################################
2.3 What does the “static” keyword mean ? Can you override private or static method in Java ?
http://infraking.tistory.com/103
static 변수(즉 정적변수)란  
- Class 당 하나만 생성되는 변수, 객체(인스턴스)를 아무리 많이 만들더라도 변수는 하나만 존재 
- 객체가 생성될 때마다 새롭게 생성되는 멤버 변수와는 달리 초기에 한번만 생성되고 공유하여 사용가능 

################################################################################
2.4 Can you access non static variable in static context ?
Java의 정적 변수는 해당 클래스에 속하며 그 값은 모든 인스턴스에 대해 동일하게 유지됩니다. 
정적 변수는 클래스가 JVM에 의해로드 될 때 초기화됩니다. 
코드가 어떤 인스턴스도없이 비 정적 변수에 액세스하려고하면 해당 변수가 아직 만들어지지 않았기 때문에 컴파일러가 불평 할 것입니다.

################################################################################
2.5 What are the Data Types supported by Java ? What is Autoboxing and Unboxing ?
http://hyeonstorage.tistory.com/135

java에는 크게 기본형, 참조형 변수 두 종류가 있습니다.
기본형은 boolean, char, byte, short, int, long, float, double와 같이 계산을 할 수 있는 타입이며,
참조형은 기본형을 제외한 나머지 타입을 의미합니다. String, StringBuffer, List 등등 개인이 만든 클래스도 참조형 타입이 될 수 있습니다.
출처: http://manducku.tistory.com/37 [Manducku`s Code]
JAVA에는 8개의 기본 데이터 타입(primitive data types)이 있다.
8bit = 1byte 
1 byte의 범위는 -128 ~ 127
정수 타입 : byte(1byte), short(2byte), int(4byte), long(8byte)
부동 소수점 타입 : float(4byte), double(8byte)
부울 데이터 타입 : boolean(1byte)
문자 데이터 타입 : char(2byte)

자바 - 오토박싱/언박싱
기본형에 상응되는 Wapper클래스 타입간의 자료 변환작업이 불필요할 정도로 많은 코드를 용구하는 경우가 있다.
5.0에서는 int와 Integer간의 변환작업을 컴파일러가 맡아서 처리하므로 불필요함을 크게 줄었다.
5.0에서 이러 귀찮은 변환작업을 자동으로 제공하는 이를 오토박싱/언박싱이라고 한다.

int a = 5;
Integer it = new Integer(a); ==> 객체
int i = it.intValue() => 개체 -> 기본형
====================================== 이런 번거러운 작업이...5.0이후로 개선되어
1. AutoBoxing : 기본형 => 오브젝트형 자동 변환
Integer it = a; ==> 숫자 a에 박스가 쉬어져 it라는 오브젝트가 되어짐
2. unBoxing : 오브젝트형 => 기본형으로 자동 변환
int i = it ; 

################################################################################
2.6 What is Function Overriding and Overloading in Java ?
1 Overloading(오버로딩) 중복정의
- 같은 이름의 메소드를 여러개 정의하는 것
- 매개변수의 타입이 다르거나 개수가 달라야 한다.(매개변수의 수, 배치(순서)등)
* return type과 접근 제어자는 영향을 주지 않음.

2 Overriding(오버라이딩) 재정의

자식클래스에서 오버라이딩하는 메서드는 부모클래스의 메서드와
- 이름이 같아야 함
- 매개변수가 같아야 함
- 리턴타입이 같아야 함

접근제한자는 부모클래스와 같거나 더 넓게 지정해야 함
 
 * 접근제한자의 넓은개념부터의 순서 : public > protected > default(생략한 경우) > private

################################################################################
2.7 What is a Constructor, Constructor Overloading in Java and Copy-Constructor . . . . . . . . . . . . . . . . . . . 4
자바에서 constructor 생성자는 객체를 초기화 하기 위해 사용하는 메소드의 특별한 타입입니다.
#생성자(constructor)
- 클래스를 대상으로 객체를 생성하는 역할 
- 클래스의 이름과 동일 
- 메소드의 형태를 갖는다 -> but, 리턴타입은 없다. 
- 반드시 모든 클래스는 1개 이상의 생성자가 존재  
   -> 생성자가 없으면 JVM이 기본 생성자를 만든다.
#생성자의 용도
 1. 객체 생성 역할 
 2. 멤버변수 초기화 
 3. 객체 생성 시점에서 자동 처리할 내용 
   -> 생성자는 객체 생성 시점에서 1회만 호출됨(new명령어 사용시점) 
################################################################################
2.8 Does Java support multiple inheritance ? 
메소드 오버라이딩을 할 때 어떤 슈퍼클래스의 메소드를 오버라이딩 하려고 하는지 자바는 알 수 없습니다. 이런 문제 때문에 클래스는 다중상속을 할 수 없습니다.
인터페이스는 일반 클래스처럼 메소드가 어떤 행동을 하는지는 기술하지 않습니다. 추상화된 메소드이기 때문이죠.
(이 때 다중상속은 인터페이스와 인터페이스 사이에서만 가능합니다.)

################################################################################
2.9 What is the difference between an Interface and an Abstract class ? . . . . . . . . . . . . . . . . . . . . . . . . . 4
1 Interface
- 오직 추상메서드와 상수만을 멤버로 갖는다.
- Implements 키워드를 사용
- Extends는 하나의 클래스만 상속 가능하나 Interface는 다중 상속이 가능하다.

2 Abstract Class
- 추상메서드를 하나 이상 가진 클래스 (구상 메서드 포함 가능)
- 하위 클래스를 참조하여 상위 클래스의 객체를 생성
- 하위 클래스를 제어하기 위해 사용

공통점 
- new 연산자로 인스턴스 생성 불가능.

3 Abstract Method
-함수의 body부분({})이 없는 미완성의 함수
-상속받은 클래스는 반드시 상위클래스의 추상메소드를 구현해야만 한다.

################################################################################
2.10 What are pass by reference and pass by value ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
1) call-by-value 
- 메서드 호출 시 기본 자료형의 값을 인자로 전달하는 방식
- 호출 시의 실인자는 별도의 값으로 인식되어 영향을 받지 않음

 2) call-by-reference (call-by-reference 를 지원안함)
- 메서드 호출 시 전달하려는 인자를 참조(객체) 자료형을 사용한 경우를 의미
- 하나의 객체를 참조하는 변수가 2개가 되어 어느 한 곳에서 수정을 하게 되면 같은 객체를 참조하는 다른 쪽에서도 영향을 받게 됨.
################################################################################
################################################################################
3 Java Threads
################################################################################
3.1 What is the difference between processes and threads ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
프로세스는 실행될 때 운영체제로부터 프로세서를 할당받고, 운영되기 위해 필요한 주소 공간, 메모리 등 자원을 할당받습니다. 
스레드란 한 프로세스 내에서 동작되는 여러 실행의 흐름으로, 프로세스 내의 주소 공간이나 자원들을 같은 프로세스 내에 스레드끼리 공유하면서 실행됩니다.
그러니까 프로세스와 스레드에 대한 질문은 결국에는 운영체제가 시스템의 자원을 어떤 단위로 할당하고, 프로세스와 스레드는 이 자원을 어떻게 사용하느냐를 알고 있냐에 대한 질문입니다.

그렇다면 왜, 여러 프로세스(멀티 프로세스)로 할 수 있는 작업들을 굳이 하나의 프로세스에서 스레드로 나눠가면서 할까요? 
이유는 굉장히 1차원 적입니다. 
운영체제는 시스템 작업을 효율적으로 관리하기 위한 것이므로 이 목적을 더 크게 달성하기 위해서 스레드를 사용하는 것이죠. 

자세히 말씀드리자면 멀티 프로세스로 실행되는 작업을 멀티 스레드로 실행할 경우, 
프로세스를 생성하여 자원을 할당하는 시스템 콜이 줄어들어 자원을 효율적으로 관리할 수 있습니다. 
뿐만 아니라 프로세스간의 통신보다 스레드 간의 통신의 비용이 적으므로 작업들 간의 통신의 부담이 줄어들게 됩니다.
이처럼 스레드를 활용하면 자원의 효율성이 증가하기도 하지만 스레드 간의 자원 공유는 전역 변수를 이용하므로 동기화 문제에 신경을 써야 합니다. 
때문에 멀티스레드 프로그래밍은 프로그래머의 주의를 요구합니다.

다시 한번 말씀드리지만 위 질문에 대한 key point는 운영체제에서 작업을 실행할 때 자원을 할당하는 단위를 알고 있느냐와 프로그램을 멀티 스레드를 구현할 때 장.단점을 알고 있느냐에 대한 질문입니다.

################################################################################
3.2 Explain different ways of creating a thread. Which one would you prefer and why ? . . . . . . . . . . . . . . . . 6
자바 쓰레드Java Thread의 정의를 알기 전에 프로세스Process에 대해 알아야 합니다. 
보통 우리가 만드는 프로그래밍 언어Java, C/C++ 등로 소스를 짜서 만든 것을 "프로그램"이라고 합니다. 
그리고 이 프로그램을 "실행" 시켜서 동작하게 만들면 이것을 "프로세스"라고 합니다. 
이 프로세스는 보통 하나의 루틴프로그램 처리 경로을 가지고 있습니다. 이 루틴은 직렬적입니다. 
즉 어떠한 일을 수행하는 것에 있어 프로그래머가 원하는 순서대로 일을 처리합니다. 
그러나 생각해보면 굳이 앞뒤 순서가 필요 없는 일들이 있을 때 분리해서 동시에 처리하고 싶은 생각이 들 때가 있습니다. 
이 때 자바에서 사용할 수 있는 것이 쓰레드Thread입니다.
자바 쓰레드를 이용하면 하나의 프로세스에서도 병렬적으로 처리, 즉 여러 개의 처리 루틴을 가질 수 있습니다. 
단순 반복의 코드를 실행할 때도 여러 개의 쓰레드를 만들어서 분리 시킨 뒤 결과 데이터를 받아 합치면 그만큼 시간을 절약할 수 있습니다.

Thread 클래스를 상속 받는 것
① Thread 클래스를 상속받은 후, run() 메소드를 원하는 작업을 하도록 오버라이딩
② 완성된 클래스를 생성한 후, start() 메소드를 실행
void start()	쓰레드 생성하고 run() 메소드를 실행시키는 메소드
void run()	쓰레드가 할 일을 정의한 메소드
String getName()	쓰레드의 이름을 반환
void setName()	쓰레드의 이름을 설정
void sleep(long millis)	1000분의 millis 초 만큼 쓰레드를 중지시킨 후, 재실행
boolean isAlive()	쓰레드가 살아있는지 확인

Runnable 인터페이스 구현
① Runnable 인터페이스를 상속받은 후, run() 메소드를 원하는 작업을 하도록 구현
② 완성된 클래스를 생성한 후, Thread 클래스의 생성자에게 인수로 전달

Thread 클래스를 상속받아 클래스를 만드는 경우에는 해당 클래스의 start() 메소드를 직접 호출했지만, 
Runnable 인터페이스를 상속받는 경우에는 Runnable 인터페이스로 구현한 클래스의 객체를 인수로 주어 Thread 클래스의 객체를 생성한 후, 
생성된 Thread 객체의 start() 메소드를 호출해주어야 합니다.
Thread 클래스의 생성자는 Runnable 인터페이스의 서브클래스를 인수로 받으면, 해당 클래스의 run() 메소드를 실행하는 쓰레드를 만듭니다.

################################################################################
3.3 Explain the available thread states in a high-level.
New : new 키워드로 인스턴스화된 상태
Runnable : start 메소드가 호출되어 실행 준비를 마친 상태
Blocked : 쓰레드 실행 중에 sleep 혹은 join 메소드가 호출되어 잠시 멈춘 상태
Dead : run 메소드가 완료되어 실행이 완전히 종료된 상태

################################################################################
3.4 What is the difference between a synchronized method and a synchronized block ?
3.5 How does thread synchronization occurs inside a monitor ? What levels of synchronization can you apply ? 
자바에서는 스레드를 동기화 하기 위해서 synchronized를 제공한다.
스레드는 synchronized 메소드에 들어가기 위해 lock을 얻고 메소드가 끝이나면 lock을 반환한다. 
어떠한 스레드가 lock을 얻어 synchronized 메소드를 사용중이면 다른 메소드는 lock이 없으므로 synchronized에 접근할 수 없고, 
다른 스레드가 lock을 반환 할 때까지 기다려야 한다.

실제로 위와 같은 작업은 JVM에 의해 자동으로 수행되기 때문에 우리는 synchronized 메소드를 이용하기만 하면 된다.

synchronized를 이용하는 방법은 2가지가 있다.
1. synchronized method 방법
메소드 앞에 synchronized 키워드를 붙여주면 간단하게 사용할 수 있다.
public synchronized 메소드명(파라미터) { ... }

2. synchronized block 방법
synchronized 메소드와 기능은 유사하다. 파라미터가 공유할 객체로 들어간다.
synchronized (공유할 객체) { ... }

################################################################################
3.6 What’s a deadlock ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7

################################################################################
3.7 How do you ensure that N threads can access N resources without deadlock ? . . . . . . . . . . . . . . . . . . . 7

################################################################################
################################################################################
4 Java Collections 8
################################################################################
4.1 What are the basic interfaces of Java Collections Framework ? . . . . . . . . . . . . . . . . . . . . . . . . . . . 8

################################################################################
4.2 Why Collection doesn’t extend Cloneable and Serializable interfaces ? . . . . . . . . . . . . . . . . . . . . . . . 8

################################################################################
4.3 What is an Iterator ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8

################################################################################
4.4 What differences exist between Iterator and ListIterator ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8

################################################################################
4.5 What is difference between fail-fast and fail-safe ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9

################################################################################
4.6 How HashMap works in Java ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9

################################################################################
4.7 What is the importance of hashCode() and equals() methods ? . . . . . . . . . . . . . . . . . . . . . . . . . . . 9

################################################################################
4.8 What differences exist between HashMap and Hashtable ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9

################################################################################
4.9 What is difference between Array and ArrayList ? When will you use Array over ArrayList ? . . . . . . . . . . . 9

################################################################################
4.10 What is difference between ArrayList and LinkedList ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10

################################################################################
4.11 What is Comparable and Comparator interface ? List their differences. . . . . . . . . . . . . . . . . . . . . . . . 10

################################################################################
4.12 What is Java Priority Queue ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10

################################################################################
4.13 What do you know about the big-O notation and can you give some examples with respect to different data structures ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10

################################################################################
4.14 What is the tradeoff between using an unordered array versus an ordered array ? . . . . . . . . . . . . . . . . . . 10

################################################################################
4.15 What are some of the best practices relating to the Java Collection framework ? . . . . . . . . . . . . . . . . . . 11

################################################################################
4.16 What’s the difference between Enumeration and Iterator interfaces ? . . . . . . . . . . . . . . . . . . . . . . . . 11

################################################################################
4.17 What is the difference between HashSet and TreeSet ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11

################################################################################
################################################################################
5 Garbage Collectors 12
################################################################################
5.1 What is the purpose of garbage collection in Java, and when is it used ? . . . . . . . . . . . . . . . . . . . . . . 12

################################################################################
5.2 What does System.gc() and Runtime.gc() methods do ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12

################################################################################
5.3 When is the finalize() called ? What is the purpose of finalization ? . . . . . . . . . . . . . . . . . . . . . . . . . 12

################################################################################
5.4 If an object reference is set to null, will the Garbage Collector immediately free the memory held by that object ? 12

################################################################################
5.5 What is structure of Java Heap ? What is Perm Gen space in Heap ? . . . . . . . . . . . . . . . . . . . . . . . . 12

################################################################################
5.6 What is the difference between Serial and Throughput Garbage collector ? . . . . . . . . . . . . . . . . . . . . . 13

5.7 When does an Object becomes eligible for Garbage collection in Java ? . . . . . . . . . . . . . . . . . . . . . . 13

5.8 Does Garbage collection occur in permanent generation space in JVM ? . . . . . . . . . . . . . . . . . . . . . . 13

################################################################################
################################################################################
6 Exception Handling 14
################################################################################
6.1 What are the two types of Exceptions in Java ? Which are the differences between them ? . . . . . . . . . . . . . 14

################################################################################
6.2 What is the difference between Exception and Error in java ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14

################################################################################
6.3 What is the difference between throw and throws ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14

################################################################################
6.4 What is the importance of finally block in exception handling ? . . . . . . . . . . . . . . . . . . . . . . . . . . . 14

################################################################################
6.5 What will happen to the Exception object after exception handling ? . . . . . . . . . . . . . . . . . . . . . . . . 14

################################################################################
6.6 How does finally block differ from finalize() method ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15

################################################################################
################################################################################
9 JDBC
################################################################################
9.1 What is JDBC ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20

################################################################################
9.2 Explain the role of Driver in JDBC. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20

################################################################################
9.3 What is the purpose Class.forName method ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20

################################################################################
9.4 What is the advantage of PreparedStatement over Statement ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20

################################################################################
9.5 What is the use of CallableStatement ? Name the method, which is used to prepare a CallableStatement. . . . . . 20

################################################################################
9.6 What does Connection pooling mean ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21

################################################################################
################################################################################
10 Remote Method Invocation (RMI)
################################################################################
10.1 What is RMI ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22

################################################################################
10.2 What is the basic principle of RMI architecture ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22

################################################################################
10.3 What are the layers of RMI Architecture ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22

################################################################################
10.4 What is the role of Remote Interface in RMI ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22

################################################################################
10.5 What is the role of the java.rmi.Naming Class ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23

################################################################################
10.6 What is meant by binding in RMI ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23

################################################################################
10.7 What is the difference between using bind() and rebind() methods of Naming Class ? . . . . . . . . . . . . . . . 23

################################################################################
10.8 What are the steps involved to make work a RMI program ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23

################################################################################
10.9 What is the role of stub in RMI ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23

################################################################################
10.10What is DGC ? And how does it work ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23

################################################################################
10.11What is the purpose of using RMISecurityManager in RMI ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24

################################################################################
10.12Explain Marshalling and demarshalling. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24

################################################################################
10.13Explain Serialization and Deserialization. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24

################################################################################
################################################################################
11 Servlets
################################################################################
11.1 What is a Servlet ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25

################################################################################
11.2 Explain the architechure of a Servlet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25

################################################################################
11.3 What is the difference between an Applet and a Servlet ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25

################################################################################
11.4 What is the difference between GenericServlet and HttpServlet ? . . . . . . . . . . . . . . . . . . . . . . . . . . 25

################################################################################
11.5 Explain the life cycle of a Servlet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25

################################################################################
11.6 What is the difference between doGet() and doPost() ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26

################################################################################
11.7 What is meant by a Web Application ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26

################################################################################
11.8 What is a Server Side Include (SSI) ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26

################################################################################
11.9 What is Servlet Chaining ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26

################################################################################
11.10How do you find out what client machine is making a request to your servlet ? . . . . . . . . . . . . . . . . . . . 26

################################################################################
11.11What is the structure of the HTTP response ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26

################################################################################
11.12What is a cookie ? What is the difference between session and cookie ? . . . . . . . . . . . . . . . . . . . . . . 27

################################################################################
11.13Which protocol will be used by browser and servlet to communicate ? . . . . . . . . . . . . . . . . . . . . . . . 27

################################################################################
11.14What is HTTP Tunneling ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27

################################################################################
11.15What’s the difference between sendRedirect and forward methods ? . . . . . . . . . . . . . . . . . . . . . . . . 27

################################################################################
11.16What is URL Encoding and URL Decoding ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27

################################################################################
################################################################################
12 JSP
################################################################################
12.1 What is a JSP Page ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28

################################################################################
12.2 How are the JSP requests handled ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28

################################################################################
12.3 What are the advantages of JSP ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28

################################################################################
12.4 What are Directives ? What are the different types of Directives available in JSP ? . . . . . . . . . . . . . . . . . 28

################################################################################
12.5 What are JSP actions ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29

################################################################################
12.6 What are Scriptlets ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29

################################################################################
12.7 What are Decalarations ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29

################################################################################
12.8 What are Expressions ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29

################################################################################
12.9 What is meant by implicit objects and what are they ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29

################################################################################
################################################################################


