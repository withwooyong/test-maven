#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/socket.h>


#define BUFSIZE 1024
void error_handling(char *message);     // 에러핸들링
void z_handler(int sig);                // 시그핸들러


int main(int argc, char **argv)
{
        int serv_sock;                  // 서버 디스크립터
        int clnt_sock;                  // 클라이언트 디스크립터
        struct sockaddr_in serv_addr;   // 서버 주소포인터
        struct sockaddr_in clnt_addr;   // 클라이언트 주소포인터
        struct sigaction act;
        int addr_size, str_len, state;
        pid_t pid;
        char message[BUFSIZE];
        char send_message[BUFSIZE];

        if(argc != 2) {
                printf("Usage: %s <port>\n", argv[0]);
                exit(1);
        }

        act.sa_handler = z_handler;
        sigemptyset(&act.sa_mask);      // 시그널 초기화
        act.sa_flags = 0;               // 플래그 초기화

/* 시그널 핸들러 등록 */
        state = sigaction(SIGCHLD, &act, 0);
        if(state != 0) {
                puts("sigaction() error\n");
                exit(1);
        }

        serv_sock = socket(PF_INET, SOCK_STREAM, 0);
        memset(&serv_addr, 0, sizeof(serv_addr));
        serv_addr.sin_family = AF_INET;
        serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
        serv_addr.sin_port = htons(atoi(argv[1]));

        if(bind(serv_sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {
                error_handling("bind() error");
        }
        if(listen(serv_sock, 5) == -1) {
                error_handling("listen() error");
        }

        addr_size = sizeof(clnt_addr);  

        while(1) {
                addr_size = sizeof(clnt_addr);       
                clnt_sock = accept(serv_sock, (struct sockaddr *)&clnt_addr, &addr_size);
                if(clnt_sock == -1) {
                        puts("clntsock==-1");
                        continue;
                }                                                                     
                // 클라이언트와의 연결을 독립적으로 생성 
                //
                if((pid = fork()) == -1)  {
                        puts("fork==-1");
                        close(clnt_sock);
                        continue;
                }
                else if(pid > 0) {
                        puts("connection created");
                        close(clnt_sock);
                        continue;
                }
                else {
                // 자식 프로세스의 처리 영역 : 데이터 수신 및 전송
                        close(serv_sock);
                        //puts("in else");
                        while((str_len = read(clnt_sock, message, BUFSIZE)) != 0)
                        {

                                if(strcmp(message,"no") != 0) {
                                        //strcpy(send_message, "007_01371511.DM4.10.mp4");
                                        strcpy(send_message, "007_01371511.DM4.10.mp4");
                                }
                                else {
                                        strcpy(send_message, "stop");
                                }
                                int send_msg_len = strlen(send_message);
                                printf("message : %s\n", message); 
                                printf("s message : %s\n", send_message);
                                write(clnt_sock, send_message, BUFSIZE);

                        }
                        puts("connection closed");
                        close(clnt_sock);
                        exit(0);
                }
        }
        return 0;
}

void z_handler(int sig)
{
        pid_t pid;
        int ret;
        pid = waitpid(-1, &ret, WNOHANG);
        printf("expired zombie process ID: %d\n", pid);
        printf("returned data: %d\n\n", WEXITSTATUS(ret));
}


void error_handling(char *message)
{
        fputs(message, stderr);
        fputc('\n', stderr);
        exit(1);
}