CyclicRotation : 배열의 순서를 오른쪽으로 K번 만큼 시프트 시키는 문제
OddOccurrencesInArray : 배열 속에서 짝이 없는 요소의 값을 리턴.
Equilibrium : 
FrogJmp : 개구리가 X-->Y로 가는 점프(D)를 이용하여 최소 점프 횟수 구하기
PermMissingElem : 없는 숫자를 찾아내는 함수
TapeEquilibrium : N 개의 정수로 구성된 0이 아닌 인덱스가없는 배열 A가 주어지면 달성 할 수있는 최소의 차이를 반환
FrogRiverOne : 개구리가 강 저편으로 점프 할 수있는 가장 빠른 시간을 찾는 것
MaxCounters : 배열 연산
MissingInteger : 배열에 없는 최소양의 정수
PermCheck : 주어진 배열이 순열인지 체크 / 합의공식 n*(n+1)/2    
CountDiv : 주어진 숫자 사이에 나누어지는 갯수 
GenomicRangeQuery : 배열 조합관련
MinAvgTwoSlice : 배열 슬라이스 최소평균
PassingCars : 도로에서 지나가는 자동차 수(크로스되는)
Prefixsums : mushroom picker가 m 이동에서 수집 할 수있는 최대 버섯 수
Distinct : 중복제거 후 유일한 값의 갯수
MaxProductOfThree : 배열중 3개 항목의 곲셈 중 최대값 구하는 문제
NumberOfDiscIntersections : 일련의 디스크에서 교차점 수를 계산
Triangle : 삼각형을 주어진 가장자리 집합으로 만들 수 있는지 여부를 결정
Brackets : {[()()]}
Fish : 얼마나 많은 물고기가 살아 있는지 계산. 배열 2개
Nesting : (()(())()) 주어진 문자열이 쌍이 맞는지 확인 Stack 사용
StoneWall : 벽을 건축하는 데 필요한 최소 블록 수를 계산하는 것입니다. rectangles 직사각형
Dominator : stack 사용, 배열에서 가장 많은 빈도수를 갖는 숫자의 위치중 아무거나 반환하는 문제
EquiLeader : 절반이상 나오는 leader + 배열조합문제 
Leader : Leader는 배열에서 절반이상의 중복된 값을 말한다.
MaxDoubleSliceSum : 모든 이중 슬라이스의 최대 합계. Kadane's algorithm
MaximumSliceProblem : 어떤 배열이 주어졌을 때, 배열에서 연속된 부분배열 중 가장 큰 합을 찾는 문제이다.
MaximumSubarrayProblem
MaxProfit : 주식 가격의 로그가 주어지면 가능한 최대 수입을 계산
MaxSliceSum : 배열 요소의 하위 시퀀스의 최대 합계
CompositeNumbers : 합성수 1과 그 자신 이외의 수를 약수로 가지는 자연수로, 모두 소수의 곱으로 분해할 수 있다.
CountFactors : factor 약수 약수(約數, divisor)는 어떤 수를 나누었을 때 나머지가 0인 수를 말하며, 배수 관계와 서로 반대되는 개념이다.
Eratosthenes : 에라토스테네스, 소수찾는법
Flags : 산봉우리에서 설정할 수있는 최대 플래그 수
MinPerimeterRectangle : 면적이 N 인 모든 직사각형의 최소 둘레
Peaks : 배열 A를 나눌 수있는 최대 블록 수
CountNonDivisible : 각 요소의 약수가 아닌 배열의 요소 수를 계산













String binaryString = Integer.toBinaryString(N);

Map<String, String> map = new HashMap<>();
map.put("mon", "Monday");
Set<String> key = map.keySet();
for (String string : key) {
    System.out.println(string + ", stands for " + (String)map.get(string));
}
        
LinkedList<String> list = new LinkedList<>();
list.add("add1");
list.addFirst("first1");
  list.addLast("last1");      
        
summation formula 
합공식 sum = n*(n+1)/2

OddOccurrencesInArray 배열 속에서 짝이 없는 요소의 값을 리턴.

^ (비트 XOR) 두 피연산자의 대응되는 비트에서 서로 같은 경우에는 0을, 다른 경우에는 1을 반환 a ^ b 
1. 모든 배열의 항목을 XOR 한다. XOR의 결과를 X
2. 1에서 n까지의 모든 숫자를 XOR 한다. 이결과를 Y
3. X와 Y를 XOR하면 빠진 숫자가 나온다.

-- stack 정렬
public static Stack<Integer> sort(Stack<Integer> stk) {
		Stack<Integer> rstk = new Stack<Integer>();
		while (!stk.isEmpty()) {
			int tmp = stk.pop();
			while (!rstk.isEmpty() && rstk.peek() > tmp) {
				stk.push(rstk.pop());
			}
			rstk.push(tmp);
		}
		return rstk;
	}
	
-- prefix sum 구간합 
sum[i] = 1~i 의 합
구간 x 부터 y 까지의 합 = sum[y] - sum[x-1]

http://blog.naver.com/onjo0127/220787710808

1. 사건과 경우의 수
2. 합의법칙 곱의법칙

* 합의 법칙
~또는, ~이거나

* 곱의 법칙
~이고, ~그리고, ~와

* 이웃한다.
A, B, (C, D)
3*2*1*2(C,D)

이해안된 것들
Prefixsums
NumberOfDiscIntersections
Fish
StoneWall
EquiLeader
MaxDoubleSliceSum
MaximumSliceProblem
MinPerimeterRectangle
Peaks
CountNonDivisible
CountSemiprimes
ChocolatesByNumbers
CommonPrimeDivisors
FibFrog
Ladder
MinMaxDivision
NailingPlanks
CountDistinctSlices

GCD 최대공약수(最大公約數)란, 0이 아닌 두 정수나 다항식의 공통되는 약수 중에서 가장 큰 수를 말한다. 두 정수 a와 b의 최대공약수를 기호로 gcd(a,b)로 표기한다. (위키피디아 발췌)
private static int GCD(int p, int q) {
        if (q == 0) {
            return p;
        }
        return GCD(q, p % q);
    }

Collections.swap

new StringBuilder(str).reverse().toString())

private static int[] reverseIntArray(int[] data) {
        for (int i = 0; i < data.length / 2; i++) {
            int temp = data[i];
            data[i] = data[data.length - i - 1];
            data[data.length - i - 1] = temp;
        }
        return data;
    }

private static int reverseInt(int input) {
        long reversedNum = 0;
        long input_long = input;
        while (input_long != 0) {
            reversedNum = reversedNum * 10 + input_long % 10;
            input_long = input_long / 10;
        }

        if (reversedNum > Integer.MAX_VALUE || reversedNum < Integer.MIN_VALUE) {
            throw new IllegalArgumentException();
        }
        return (int)reversedNum;
    }
    

약수 divisors
divisors.sort(Comparator.comparingInt(Integer::intValue));
arrayList.sort((p1, p2) -> p1.compareTo(p2));
Arrays.sort(months, Comparator.comparingInt(String::length));
Arrays.sort(months, comparingInt(String::length));
Arrays.sort(months, (String a, String b) -> a.length() - b.length());
Arrays.sort(months, (a, b) -> a.length() - b.length());
Arrays.sort(months, (String a, String b) -> { return Integer.signum(a.length() - b.length()) };
);
Arrays.sort(months, (String a, String b) -> { return Integer.signum(a.length() - b.length()); }
);


int arrMax = Arrays.stream(A).max().getAsInt();
Arrays.fill(bitList, false); //특정 값으로 초기화

-- 특정 값으로 초기화
List<Boolean> prime = new ArrayList<Boolean>();
prime.addAll(Collections.nCopies(maxValue + 1, Boolean.TRUE));
 	
제곱 square 제곱근 square root

Prime 	
소수 (素數; 또는 솟수)는 1과 자기 자신 외의 양의 약수를 가지지 않는 1보다 큰 자연수다.
소수 (小數)는 소수점을 이용한 실수부를 뜻한다.

divisor
약수(約數, divisor)는 어떤 수를 나누었을 때 나머지가 0인 수를 말하며, 배수 관계와 서로 반대되는 개념이다.
0이 아닌 임의의 수 n이 있을 때 -1,1,-n,n은 항상 n의 약수이므로 이들을 자명한 약수(trivial divisor), 이들을 제외한 약수를 고유 약수라고 부르며, 
자기 자신인 n을 제외한 약수를 진약수라고 부른다. 

원둘레공식 "반지름×2×3.14" 2πr
(π는 3.14 , r은 반지름 2는 2)

* 순열공식 [ permutation formula ] 
순열의 경우의 수를 구하는 공식이다. Permutation.java 
순열이란 n개 중 서로다른 r개를 선택하고 순서를 고려하는 것을 말한다.
nPr = n!/(n-r)!

* 조합공식 [ combination formula ] 
조합의 경우의 수를 구하는 공식이다. 
조합은 n개 중 서로 다른 r개를 선택하되 순서를 고려하지 않는 것을 말한다.
nCr = n!/r!(n-r)!
nCr = n-1Cr-1 + n-1Cr
public static int combination(int n, int r) {       
        log.debug("{} {}", n, r);
        if(n == r || r == 0) {
            return 1;
        } else {
            return combination(n - 1, r - 1) + combination(n - 1, r); // nCr = n-1Cr-1 + n-1Cr
        }
    }



* 중복조합 공식 [ combination with repetition ]
중복조합의 경우의 수를 구하는 공식이다. 
중복조합은 n개 중 r개를 선택하되, 중복을 허용하고 순서를 고려하지 않는 것을 말한다.
nHk = n+k-1Ck





https://www.acmicpc.net/lecture/1
난이도 수준

고급반 예시 문제 (하루 일정)

https://www.acmicpc.net/problem/1289 (트리의 가중치)
https://www.acmicpc.net/problem/2207 (가위바위보)
https://www.acmicpc.net/problem/5897 (Symmetry)
https://www.acmicpc.net/problem/10541 (싸리와 버드의 피라미드)
https://www.acmicpc.net/problem/10058 (센서 네트워크)
https://www.acmicpc.net/problem/9520 (NP-hard)
https://www.acmicpc.net/problem/2618 (경찰차)
https://www.acmicpc.net/problem/11111 (두부장수 장홍준 2)
https://www.acmicpc.net/problem/11932 (트리와 K번째 수)
https://www.acmicpc.net/problem/4217 (신성문자)
https://www.acmicpc.net/problem/10999 (구간 합 구하기 2)
https://www.acmicpc.net/problem/2185 (직사각형의 합집합)
기초반 예시 문제 (하루 일정)

https://www.acmicpc.net/problem/1644 (소수의 연속합)
https://www.acmicpc.net/problem/1874 (스택 수열)
https://www.acmicpc.net/problem/2579 (계단 오르기)
https://www.acmicpc.net/problem/1110 (더하기 사이클)
https://www.acmicpc.net/problem/2530 (인공지능 시계)
https://www.acmicpc.net/problem/2163 (초콜릿 자르기)
https://www.acmicpc.net/problem/1158 (조세퍼스 문제)
https://www.acmicpc.net/problem/1261 (알고스팟)
https://www.acmicpc.net/problem/2266 (금고 테스트)
https://www.acmicpc.net/problem/1504 (특정한 최단 경로)
https://www.acmicpc.net/problem/9466 (텀 프로젝트)
https://www.acmicpc.net/problem/10819 (차이를 최대로)

BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
int n = Integer.parseInt(in.readLine());

Scanner sc = new Scanner(System.in);
