#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <stdlib.h>

#define BUFSIZE 1024


struct s_progresschk {
        int transcoding;
        int progress;
};

void error_handling(char *message);
struct s_progresschk ffmpeg_progresschk();

int main(int argc, char **argv)
{       
        int sock;
        pid_t pid;
        char message[BUFSIZE];
        char recv_message[BUFSIZE];
        int str_len, recv_len, recv_num;
        struct sockaddr_in serv_addr;
        if(argc != 3) {
                printf("Usage: %s <IP> <port>\n", argv[0]);
                exit(1);
        }

        sock = socket(PF_INET, SOCK_STREAM, 0);
        memset(&serv_addr, 0, sizeof(serv_addr));
        serv_addr.sin_family = AF_INET;
        serv_addr.sin_addr.s_addr = inet_addr(argv[1]);
        serv_addr.sin_port = htons(atoi(argv[2]));

        if(connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {
                error_handling("connect() error!");
        }

        pid = fork();

        if(pid == 0) {
                while(1) {
                        //puts("test_1");
                        sleep(10);
                        //puts("transcoding : ");
                        /*if(!strcmp(message, "q\n")) {
                                shutdown(sock, SHUT_WR);
                                close(sock);
                                exit(0);
                        }*/

     
                        char* c_progress;
                        struct s_progresschk progresschk;
                        int i_progress;
                        progresschk = ffmpeg_progresschk();
                //      printf("%d %d", progresschk.progress, progresschk.transcoding);
                //      sprintf(c_progress, "%d", progresschk.progress);
                //      puts("progress??");
                        if(progresschk.transcoding == 1) {
                                //puts("test");
                                strcpy(message, "yes\nprogress : ");
                                strcat(message, c_progress);
                        }
                        else {
                                //puts("test");
                                strcpy(message,"no\n");
                        }
                        printf("%s", message);
                        write(sock, message, strlen(message));
                //      printf("after write, %s", message);
                }
        }
        
        else {
                while(1) {
                        int str_len = read(sock, recv_message, BUFSIZE);
                        if(str_len == 0) {
                                exit(0);
                        }
                        recv_message[str_len] = 0;
                        puts("first puts");
                        puts(recv_message);
                        puts("after puts");
                        if(strcmp(recv_message, "stop") != 0) {
                                char str_system[BUFSIZE] = {0x00,};
                                strcpy(str_system,"FFREPORT=file=ffreport.txt:level=32 ffmpeg -y -i \"/./media/opt/ffmpeg/ffmpeg/");
                                strcat(str_system, recv_message);
                                strcat(str_system, "\" -acodec aac -ab 192k -vcodec libx264 -level 30 -b:v 300k -s 320x180 -threads 0 \"");
                                strcat(str_system, recv_message);
                                strcat(str_system, "_0300.mp4\"");
                                strcat(str_system, " -acodec aac -ab 192k -vcodec libx264 -level 30 -b:v 600k -s 640X360 -threads 0 \"");
                                strcat(str_system, recv_message);
                                strcat(str_system, "_0600.mp4\"");
                                strcat(str_system, " -acodec aac -ab 192k -vcodec libx264 -level 30 -b:v 900k -s 640X360 -threads 0 \"");
                                strcat(str_system, recv_message);
                                strcat(str_system, "_0900.mp4\"");
                                strcat(str_system, " -acodec aac -ab 192k -vcodec libx264 -level 30 -b:v 1500k -s 960x540 -threads 0 \"");
                                strcat(str_system, recv_message);
                                strcat(str_system, "_1500.mp4\"");
                                strcat(str_system, " -acodec aac -ab 192k -vcodec libx264 -level 30 -b:v 3000k -s 1280x720 -threads 0 \"");
                                strcat(str_system, recv_message);
                                strcat(str_system, "_3000.mp4\"");
                                puts(str_system);
                                system(str_system);
                                sleep(10);
                        }
                }       
        }

        close(sock);
        return 0;
}       

void error_handling(char *message)
{
        fputs(message, stderr);
        fputc('\n', stderr);
        exit(1);
}

struct s_progresschk ffmpeg_progresschk()
{
        int true = 1;
        struct s_progresschk s_progresschk;
        //memset(&s_progresschk, 0, sizeof(s_progresschk));
        int iProgress = 0;
        while (true) {
                true = 0;
                FILE* pFile = NULL;

                pFile = fopen("/./media/opt/ffmpegserver/log.txt", "r");
                float fCurrunt;
                float fDuration;

                if(pFile != NULL) {
                        char strTemp[255];
                        char *pStr;
                        fseek(pFile, -70L, SEEK_END);
                        pStr = fgets(strTemp, sizeof(strTemp), pFile);
                        while(1) {
                                if(strncmp(pStr, "time", 4) == 0){
                                        int i = 0;
                                        while(i<6){
                                                i++;
                                                *pStr = *pStr++;
                                        }
                                        break;
                                }
                                else {

                                        if(!feof(pFile))
                                                true = 0;

                                        if(*pStr == NULL) {
                                                true = 1;
                                                break;
                                        }

                                        *pStr = *pStr++;
                                        continue;
                                }
                        }
                        fCurrunt = atof(pStr);
                        fclose(pFile);
                }

                else {
                }

                FILE* dupFile = NULL;

                dupFile = fopen("/./media/opt/ffmpegserver/ffreport.txt", "r");

                if(dupFile != NULL) {
                        puts("fileopen");
                        char strTemp[255];
                        char *pStr;
                        int i = 0;
                        while(i<25) {
                                puts("infucn");
                                pStr = fgets(strTemp, sizeof(strTemp), pFile);
                                if(i == 24) {
                                        puts(&strTemp[12]);
                                        puts(&strTemp[15]);
                                        puts(&strTemp[18]);
                                        puts(&strTemp[21]);
                                        int hour = atoi(&strTemp[12]);
                                        int miniute = atoi(&strTemp[15]);
                                        int second = atoi(&strTemp[18]);
                                        int msecond = atoi(&strTemp[21]);
                                        fDuration = hour * 3600 + miniute * 60 + second + msecond / 100; 
                                }
                                i++;
                        }
                        fclose(dupFile);                                                                                                                                                 
                }                                                                                                                                                                        
                                                                                                                                                                                         
                else {                                                                                                                                                                   
                }                                                                                                                                                                        
                if(true == 0) {
                        int iProgress = (int)(fCurrunt / fDuration * 100);                                                                                                               
                        if(fCurrunt >= 0 || fDuration <= fCurrunt){
                                s_progresschk.transcoding = 0;
                        }
                        else {
                                s_progresschk.transcoding = 1;
                        }         
                        s_progresschk.progress = iProgress;                                                                                                                                      
                }                                                                                                                                                               
        }
        printf("%d, %d\n", s_progresschk.progress, s_progresschk.transcoding);                                                                                                                                                        
        return s_progresschk;         
}