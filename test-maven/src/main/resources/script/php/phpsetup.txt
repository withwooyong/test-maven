PHP-FPM 설정 파일
[global]
pid = /var/run/php-fpm.pid
error_log = /var/log/php/php-fpm.log
log_level = notice
emergency_restart_threshold = 0
emergency_restart_interval = 0
process_control_timeout = 0
daemonize = yes
 
[www]
listen = 127.0.0.1:9000
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
 
listen.owner = nginx
listen.group = nginx
listen.mode = 0666
 
user = nginx
group = nginx
 
 
pm = dynamic
pm.max_children =  10
pm.start_servers = 5
pm.min_spare_servers = 3
pm.max_spare_servers = 8
pm.max_requests = 500
pm.status_path = /status

pm = dynamic
pm.max_children =  30
pm.start_servers = 11
pm.min_spare_servers = 10
pm.max_spare_servers = 15
pm.max_requests = 500

pm = dynamic
pm.max_children = 5

 
request_slowlog_timeout = 2
request_terminate_timeout= 5
slowlog = /var/log/php/$pool.log.slow




https://zetawiki.com/wiki/CentOS_JDK_%EC%84%A4%EC%B9%98
yum list java*jdk-devel
yum install java-1.8.0-openjdk-devel.x86_64
rpm -qa java*jdk-devel
javac -version
echo "public class HelloWorld {" > HelloWorld.java
echo "  public static void main(String[] args) {" >> HelloWorld.java
echo "    System.out.println(\"Hello, World\");" >> HelloWorld.java
echo "  }" >> HelloWorld.java
echo "}" >> HelloWorld.java
javac HelloWorld.java
java HelloWorld
rm -f HelloWorld.java HelloWorld.class

ngrinder https://github.com/naver/ngrinder/releases
wget https://github.com/naver/ngrinder/releases/download/ngrinder-3.4.1-20170131/ngrinder-controller-3.4.1.war
java -XX:MaxPermSize=200m -jar ngrinder-controller-3.4.1.war
http://1.255.144.53:8080/
admin / admin

http://1.255.144.56/src/adult/11000/A329637_src.jpg 없는 이미지

1.255.144.53 ngrinder-controller-3.4.1.war controller
1.255.144.54 ngrinder-agent-3.4.1-1.255.144.56.tar
1.255.144.55 ngrinder-agent-3.4.1-1.255.144.56.tar
1.255.144.56 nginx_cache nginx_nocache

/home/manager/server/nginx_image/sbin/nginx -s stop
/home/manager/server/nginx_image/sbin/nginx -c /home/manager/server/nginx_image/conf/nginx.conf

- 테스트 1 (nginx + php) 1.255.144.55 
cache + resize 테스트


- 테스트 2 (nginx) 1.255.144.56
non cache 테스트


- 1.255.144.53 controller + agent
http://1.255.144.53:8080/login
admin / admin

1.255.144.54 agent 2 


http://1.255.144.55/resize_cache.php?u=http://1.255.144.56/movie/33600/M335635_src.jpg

http://1.255.144.53/resize.php?u=http://stimage.hanafostv.com:8080/ontv/10250/T30222_src.jpg&w=328

1.255.144.55 -> http 호출 
http://1.255.144.55/resize.php?u=http://1.255.144.56/movie/33600/M335635_src.jpg
http://1.255.144.55/resize.php?u=http://1.255.144.56/movie/33600/M335635_src_100x143.jpg
http://1.255.144.55/resize.php?u=http://1.255.144.56/movie/33600/M335635_src_200x286.jpg
http://1.255.144.55/resize.php?u=http://1.255.144.56/movie/33600/M335635_src_300x429.jpg
http://1.255.144.55/resize.php?u=http://1.255.144.56/movie/33600/M335635_src_400x572.jpg
http://1.255.144.55/resize.php?u=http://1.255.144.56/movie/33600/M335635_src_500x715.jpg


nginx + php + cache 설정 http

1.255.144.56 단일 테스트 
http://1.255.144.56/movie/33600/M335635_src.jpg
nginx + non cache

ngrinder-agent-3.4.1-1.255.144.56.tar
http://1.255.144.53:8080/ngrinder-controller-3.4.1/home

yum -y install docker
docker run -d -e 'CONTROLLER_ADDR=ip주소:8080' --memory="1g" --memory-swap -1 --cpu-period=50000 --cpu-quota=25000 --name agent_minimum ngrinder/agent:3.3
4core 16G
docker run -d -e 'CONTROLLER_ADDR=1.255.144.53:8080' --memory="1g" --memory-swap -1 --cpu-period=50000 --cpu-quota=25000 --name agent_minimum ngrinder/agent:3.3

/home/manager/ngrinder-agent/run_agent.sh

cd /home/manager/ngrinder-agent/
./run_agent.sh


[root@DEV-VM-IRCS-03 app]# ulimit -a
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 63462
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 63462
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
[root@DEV-VM-IRCS-03 app]# exit
exit
[manager@DEV-VM-IRCS-03 ~]$ ulimit -a
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 63462
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 4096
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited

http://wifida.tistory.com/127
http://intro0517.tistory.com/3

vi /etc/security/limits.conf
*                hard    nofile          65535
*                soft    nofile          65535
*                hard    nproc           65535
*                soft    nproc           65535
root             hard    nofile          65535
root             soft    nofile          65535
root             hard    nproc           65535
root             soft    nproc           65535


root hard nofile 65535
root soft nofile 65535
root hard nproc 65535
root soft nproc 65535


출처: http://intro0517.tistory.com/3 [전디버거의 코딩이야기]

--memory  : 해당 컨테이너에 물리적으로 메모리를 얼마나 할당할 지 설정하여 줍니다. 할당받은 메모리를 전부 사용했을 시, host의 메모리를 빌려서 사용합니다.
--memory-swap  : 컨테이너에게 얼만큼 메모리를 빌려줄 지 결정합니다. 만약 --memory="300m" --memory-swap="200m"일 경우, 해당 컨테이너에서 사용할 수 있는 메모리의 양은 500m입니다. 여기서는 정확하게 1gb/2gb/4gb만 사용하기 위해 -1로 메모리를 고정합니다.
--cpu-period, --cpu-quota  :  cpu-priod는 cpu-quota와 함께 사용합니다. cpu-priod의 기본 값은 100000(100ms)로, cpu-quota를 이용해서 100ms 동안 어느정도의 cpu 할당할 것 인지를 설정할 수 있습니다. 만약 cpu-quota가 25000이라면, 1/4만큼의 cpu자원을 사용할 수 있습니다. 여기서 agent vm을 2core로 설정하였기 때문에 1/2만큼의 cpu자원을 사용하도록 하기 위해 --cpu-period는 50000, --cpu-quota는 25000을 정했습니다.

/home/manager/server/nginx_image/sbin/nginx -s stop
/home/manager/server/nginx_image/sbin/nginx -c /home/manager/server/nginx_image/conf/nginx.conf

wget http://1.255.144.54/agent/download


--2017-06-16 14:49:25--  http://stimage.hanafostv.com:8080/adult/10900/A328572_src.jpg


--2017-06-16 14:52:12--  http://stimage.hanafostv.com:8080/movie/31650/M316064_src.jpg
[Nginx] 컴파일 설치/구성
http://no1jihoon.blogspot.kr/2016/09/nginx.html
wget http://nginx.org/download/nginx-1.12.0.tar.gz
원본 ./configure --prefix=/home/manager/server/nginx_image --with-http_ssl_module --with-http_gzip_static_module --with-http_stub_status_module
수정 ./configure --prefix=/home/manager/server/nginx_image --user=manager --group=manager --with-http_ssl_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_realip_module

pcre 라이브러리 설치      
yum install pcre*
gzip 압축을 사용하기 위해서 설치
yum install zlib zlib-devel
open ssl 설치
yum install openssl openssl-devel
yum install gcc

https://corpocrat.com/2009/08/18/automatic-face-detection-with-php-in-linux/

centos nginx php-fpm socket 설정 하는법에 대해 알아보도록 하자.
http://bong8nim.com/post/programming/etc/centos-nginx-php-fpm-socket-%EC%84%A4%EC%A0%95/

http://stimage.hanafostv.com:8080/ontv/10250/T30222_src.jpg

PHP 7.0.0 설치 방법
https://blog.bypass.kr/280

yum install -y epel-release
rpm -ivh http://rpms.remirepo.net/enterprise/remi-release-7.rpm
yum --enablerepo=remi update remi-release
yum --enablerepo=remi-php71 install -y php php-fpm php-devel

/home/manager/server/nginx_image/sbin/nginx -s stop
/home/manager/server/nginx_image/sbin/nginx -c /home/manager/server/nginx_image/conf/nginx.conf

curl http://stimage.hanafostv.com:8080/adult/11000/A329637_src.jpg       --create-dirs -o /home/manager/server/images/src/adult/11000/A329637_src.jpg

curl http://stimage.hanafostv.com:8080/adult/11000/A329637_src.jpg
curl http://stimage.hanafostv.com:8080/docu/10350/D89339_src.jpg


systemctl start php-fpm   // php 시작 
systemctl enable php-fpm  // php 부팅시 자동 실행
systemctl status php-fpm  // php 상태 확인
systemctl stop php-fpm    // php 정지

컴파일 설치시 해야함. mkdir /var/run/php-fpm/

ls -l /var/run/php-fpm/php-fpm.sock



wget -x, --force-directories http://stimage.hanafostv.com:8080/adult/11000/A329637_src.jpg

curl http://stimage.hanafostv.com:8080/adult/11000/A329637_src.jpg       --create-dirs -o /home/manager/server/images/src/adult/11000/A329637_src.jpg
curl http://stimage.hanafostv.com:8080/adult/11000/A329637_src.jpg       --create-dirs -o /home/manager/server/images/src/adult/11000/A329637_src.jpg

curl http://stimage.hanafostv.com:8080/adult/11000/A329637_src.jpg       --create-dirs -o /home/manager/server/images/src/adult/11000/

cenos6.4 에서 php권한에러
http://zuriyang.tistory.com/86
2017/06/13 15:58:13 [error] 3681#0: *55 FastCGI sent in stderr: "PHP message: PHP Warning:  Unknown: failed to open stream: Permission denied in Unknown on line 0
Unable to open primary script: /home/manager/server/app/test.php (Permission denied)" while reading response header from upstream, client: 210.94.1.38, server: localhost, request: "GET /test.php HTTP/1.1", upstream: "fastcgi://127.0.0.1:9000", host: "1.255.144.56"
일시적으로 끄기
# setenforce 0
다음부팅시에도 적용되는 설정
# vi /etc/selinux/config
SELINUX=enforcing   켜기
SELINUX=disabled   끄기

출처: http://zuriyang.tistory.com/86 [개발노트]

https://blog.bypass.kr/280

https://github.com/infusion/PHP-Facedetect
wget https://github.com/infusion/PHP-Facedetect/archive/master.zip

리눅스 rpm 명령어 정리
http://kyulak.tistory.com/entry/%EB%A6%AC%EB%88%85%EC%8A%A4-rpm-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A0%95%EB%A6%AC
rpm -ql opencv

In file included from /usr/include/jasper/jasper.h:77:0,
                 from /home/manager/server/opencv-3.2.0/modules/imgcodecs/src/grfmt_jpeg2000.cpp:59:
/usr/include/jasper/jas_math.h: In function [01mbool jas_safe_size_mul(size_t, size_t, size_t*)

                                                                                                /usr/include/jasper/jas_math.h:143:15: error: [01mSIZE_MAXwas not declared in this scope
  if (x && y > SIZE_MAX / x) {
               ^
/usr/include/jasper/jas_math.h: In function [01mbool jas_safe_size_add(size_t, size_t, size_t*)

                                                                                                /usr/include/jasper/jas_math.h:170:10: error: [01mSIZE_MAXwas not declared in this scope
  if (y > SIZE_MAX - x) {
          ^

Installing from sources

	1. Install OpenCV libraries (at least version 1.0.0)
	2. Unpack facedetect source package
	3. Go to facedetect folder and type "phpize && ./configure && make && make install"
	4. Make sure you have extension=facedetect.so in your php.ini

Install OpenCV 3.1 and Python 2.7 on CentOS 7
http://www.computervisiononline.com/blog/install-opencv-31-and-python-27-centos-7


http://www.xarg.org/project/php-facedetect/


http://www.atblog.co.kr/?p=6287
# 두개는 같은 명령어다. 하나씩치려면 위, 한번에 설치하려면 하단
# 개별 설치
$ yum install libxml2-devel
$ yum install bzip2-devel
$ yum install libcurl-devel
$ yum install gdbm-devel
$ yum install libvpx-devel
$ yum install libvpx
$ yum install libjpeg-turbo-devel
$ yum install libpng-devel
$ yum install libXpm libXpm-devel
$ yum install freetype-devel
$ yum install t1lib t1lib-devel
$ yum install gmp-devel
$ yum install libc-client libc-client-devel
$ yum install pam-devel
$ yum install libicu libicu-devel
$ yum install openldap-devel
$ yum install readline-devel
$ yum install libedit-devel
$ yum install libtidy libtidy-devel
$ yum install libxslt libxslt-devel
$ yum install krb5-devel
$ yum install openssl-devel
$ yum install db4-devel
$ yum -y install expat*
 
# 한번에 설치
yum -y install libxml2-devel bzip2-devel libcurl-devel gdbm-devel libvpx libvpx-devel libjpeg-turbo-devel libpng-devel libXpm \
libXpm-devel freetype-devel t1lib t1lib-devel gmp-devel libc-client libc-client-devel pam-devel libicu libicu-devel openldap-devel \
readline-devel libedit-devel libtidy libtidy-devel libxslt libxslt-devel expat* krb5-devel openssl-devel db4-devel

# 다음 libmcrypt를 설치한다. 그리고 심볼생성까지 마무리
$ wget http://www.atblog.co.kr/file/package/libmcrypt-2.5.8.tar.gz
$ tar zxvf libmcrypt-2.5.8.tar.gz
$ cd libmcrypt-2.5.8
$ ./configure
$ make
$ make install
$ ln -s /usr/local/lib/libmcrypt.so.4 /usr/local/lib64/libmcrypt.so.4

cd /home/manager/server/
wget http://kr1.php.net/distributions/php-7.1.5.tar.gz
cd ./php-7.1.5/etc
wget https://github.com/infusion/PHP-Facedetect/archive/master.zip
unzip master.zip
mv PHP-Facedetect-master facedetect

tar xvfz php-7.1.5.tar.gz
cd php-7.1.5
./configure \
--prefix=/home/manager/server/php-7.1.5 \
--with-config-file-path=/home/manager/server/php-7.1.5/etc \
--with-config-file-scan-dir=/home/manager/server/php-7.1.5/etc/conf.d \
--disable-debug \
--enable-fpm \
--enable-bcmath \
--enable-exif \
--enable-ftp \
--enable-gd-native-ttf \
--enable-inline-optimization \
--enable-intl \
--enable-mbregex \
--enable-mbstring \
--enable-sigchild \
--enable-soap \
--enable-sockets \
--enable-sysvsem=yes \
--enable-sysvshm=yes \
--enable-xml \
--enable-zip \
--with-bz2 \
--with-iconv \
--with-curl \
--with-zlib \
--with-gd \
--with-gettext \
--with-mcrypt \
--with-mhash \
--with-mysqli \
--with-xmlrpc \
--with-freetype-dir=/usr/include/freetype2 \
--with-jpeg-dir=/usr/lib \
--with-libxml-dir=/usr/lib \
--with-png-dir=/usr/lib \
--with-zlib-dir=/usr/lib \
--with-fpm-user=manager \
--with-fpm-group=manager \
--with-facedetect

make && make install

phpize && ./configure && make && make install

Installing from sources
Install OpenCV (OpenCV 2.3.1)
wget https://github.com/opencv/opencv/archive/3.2.0.tar.gz

yum install cmake
yum install python-devel numpy
yum install gcc gcc-c++
yum install gtk2-devel
yum install libdc1394-devel
yum install libv4l-devel
yum install ffmpeg-devel
yum install gstreamer-plugins-base-devel
yum install libpng-devel libjpeg-turbo-devel jasper-devel openexr-devel libtiff-devel libwebp-devel
mkdir build
cd build
cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..
make
make install

cp /usr/local/lib/python2.7/site-packages/cv2.so /usr/lib/python2.7/site-packages

python
>>> import cv2
>>> print cv2.__version__

Download facedetect source package
Unpack facedetect source package
Go to facedetect folder and type "phpize && ./configure && make && make install"
Make sure you have extension=facedetect.so in your php.ini

/bin/ld: ext/facedetect/.libs/facedetect.o: undefined reference to symbol 'cvEqualizeHist'
/usr/local/lib/libopencv_imgproc.so.3.2: error adding symbols: DSO missing from command line
collect2: error: ld returned 1 exit status
make: *** [sapi/cli/php] 오류 1

이다음 환경설정해야 하는부분이 있는데 다른부분은 원하는대로 설정하고
우선 TImezone만 세팅해주자
$ cp php.ini-production /usr/local/apache/conf/php.ini 
$ vi /usr/local/apache/conf/php.ini
 
date.timezone = "Asia/Seoul"

자 이제 설치가 끝났으나 잘 설치 되있나 확인 해 보자
$ vi /usr/local/apache/conf/httpd.conf
 
# PHP 모듈이 정상적으로 추가되었는지 확인
LoadModule php5_module        modules/libphp5.so
 
# 마임타입 추가
 
    ... 중략 ... 
    AddType application/x-httpd-php .php .html 
    AddType application/x-httpd-php-source .phps
 
 
# index.php 연결
 
    DirectoryIndex index.php index.html
    
끝으로 심볼릭 PATH 등록을 해주자
$ ln -s /usr/local/php/bin/php /bin/php
$ ln -s /usr/local/php/bin/php-config /usr/local/bin/php-config
$ ln -s /usr/local/php/bin/phpize /usr/local/bin/phpize    